// Generated by CoffeeScript 1.6.2
(function() {
  var runTest, v;

  v = require("./VocabServer.coffee");

  describe('Login', function() {
    return describe('getValidationErrors', function() {
      it('returns error when userNameOrEmail empty', function() {
        var cmd;

        cmd = new v.Login(null, "email@email.com");
        return runTest(cmd, "Username or Email cannot be empty");
      });
      return it('returns error when password empty', function() {
        var cmd;

        cmd = new v.Login("jogo", "");
        return runTest(cmd, "Password cannot be empty");
      });
    });
  });

  describe('AccountRegister', function() {
    return describe('getValidationErrors', function() {
      it('returns error when userName empty', function() {
        var cmd;

        cmd = new v.AccountRegister(null, "email@email.com", "password", "password");
        return runTest(cmd, "userName cannot be empty");
      });
      it('returns error when userName exceeds max', function() {
        var cmd, name;

        name = '01234567890123456789012345678901234567890123456789x';
        cmd = new v.AccountRegister(name, "email@email.com", "password", "password");
        return runTest(cmd, "userName cannot be more than 50 characters");
      });
      return it('returns error when userName under min', function() {
        var cmd, name;

        name = '012';
        cmd = new v.AccountRegister(name, "email@email.com", "password", "password");
        return runTest(cmd, "userName cannot be fewer than 4 characters");
      });
    });
  });

  describe('VocabServer', function() {
    describe('Login', function() {
      return it('returns true for registered user', function() {
        var cmd, rv, svr;

        cmd = new v.Login("jogo", "jogo@shugh.com");
        svr = new v.VocabServer;
        rv = svr.send(cmd);
        return rv.should.equal(true);
      });
    });
    describe('ChallengeCreate', function() {
      return it('returns challenge for valid command', function() {
        var cmd, rv, score, svr;

        cmd = new v.ChallengeCreate("jogo", "Jogo Game");
        svr = new v.VocabServer;
        rv = svr.send(cmd);
        rv.userName.should.equal("jogo");
        rv.name.should.equal("Jogo Game");
        score = rv.scoreDetails();
        score.length.should.equal(1);
        return score[0][0].should.equal("jogo");
      });
    });
    describe('ChallengeJoin', function() {
      it('returns true when new user joins existing challenge', function() {
        var challenge, cmd, rv, score, svr;

        cmd = new v.ChallengeCreate("jogo", "Jogo Game");
        svr = new v.VocabServer;
        challenge = svr.send(cmd);
        cmd = new v.ChallengeJoin("mogo", "Jogo Game");
        rv = svr.send(cmd);
        rv.should.equal(true);
        score = challenge.scoreDetails();
        score.length.should.equal(2);
        score[0][0].should.equal("jogo");
        return score[1][0].should.equal("mogo");
      });
      return it('returns false when new user joins non-existent challenge', function() {
        var challenge, cmd, svr;

        cmd = new v.ChallengeJoin("mogo", "Jogo Game");
        svr = new v.VocabServer;
        challenge = svr.send(cmd);
        return challenge.should.equal(false);
      });
    });
    describe('ChallengeSubmitAnswer', function() {
      return it('returns true when correct answer for first question', function() {
        var answer0, challenge, cmd, correctWord, gameName, rv, svr, userName;

        userName = "jogo";
        gameName = "Jogo Game";
        cmd = new v.ChallengeCreate(userName, gameName);
        svr = new v.VocabServer;
        challenge = svr.send(cmd);
        answer0 = challenge.questionByIndex(0);
        correctWord = answer0[0].word;
        cmd = new v.ChallengeSubmitAnswer(gameName, userName, 0, correctWord);
        rv = svr.send(cmd);
        return rv.should.equal(true);
      });
    });
    describe('ChallengeSubmitAnswer', function() {
      return it('returns false when incorrect answer for first question', function() {
        var answer0, challenge, cmd, correctWord, gameName, rv, svr, userName;

        userName = "jogo";
        gameName = "Jogo Game";
        cmd = new v.ChallengeCreate(userName, gameName);
        svr = new v.VocabServer;
        challenge = svr.send(cmd);
        answer0 = challenge.questionByIndex(0);
        correctWord = answer0[0].word;
        cmd = new v.ChallengeSubmitAnswer(gameName, userName, 0, correctWord + correctWord);
        rv = svr.send(cmd);
        return rv.should.equal(false);
      });
    });
    describe('ChallengeSubmitAnswer', function() {
      return it('returns true for ten correct answers in a row by a single player', function() {
        var answer, challenge, cmd, correctWord, gameName, i, rv, svr, userName, _i, _results;

        userName = "jogo";
        gameName = "Jogo Game";
        cmd = new v.ChallengeCreate(userName, gameName);
        svr = new v.VocabServer;
        challenge = svr.send(cmd);
        _results = [];
        for (i = _i = 0; _i <= 9; i = ++_i) {
          answer = challenge.questionByIndex(i);
          correctWord = answer[0].word;
          cmd = new v.ChallengeSubmitAnswer(gameName, userName, i, correctWord);
          rv = svr.send(cmd);
          _results.push(rv.should.equal(true));
        }
        return _results;
      });
    });
    describe('ChallengeSubmitAnswer', function() {
      return it('returns true for ten correct answers in a row by two players', function() {
        var answer, challenge, cmd, correctWord, gameName, i, player2, rv, svr, userName, _i, _results;

        userName = "jogo";
        gameName = "Jogo Game";
        player2 = "mogo";
        cmd = new v.ChallengeCreate(userName, gameName);
        svr = new v.VocabServer;
        challenge = svr.send(cmd);
        cmd = new v.ChallengeJoin(player2, gameName);
        svr.send(cmd);
        _results = [];
        for (i = _i = 0; _i <= 9; i = ++_i) {
          answer = challenge.questionByIndex(i);
          correctWord = answer[0].word;
          cmd = new v.ChallengeSubmitAnswer(gameName, userName, i, correctWord);
          rv = svr.send(cmd);
          rv.should.equal(true);
          cmd = new v.ChallengeSubmitAnswer(gameName, player2, i, correctWord);
          rv = svr.send(cmd);
          _results.push(rv.should.equal(true));
        }
        return _results;
      });
    });
    return describe('ChallengeScoreDetails after two players answer ten questions', function() {
      var answer, challenge, cmd, correctWord, gameName, i, player1, player2, rv, svr, _i;

      gameName = "Jogo Game";
      player1 = "jogo";
      player2 = "mogo";
      cmd = new v.ChallengeCreate(player1, gameName);
      svr = new v.VocabServer;
      challenge = svr.send(cmd);
      cmd = new v.ChallengeJoin(player2, gameName);
      svr.send(cmd);
      for (i = _i = 0; _i <= 9; i = ++_i) {
        answer = challenge.questionByIndex(i);
        correctWord = answer[0].word;
        cmd = new v.ChallengeSubmitAnswer(gameName, player1, i, correctWord);
        rv = svr.send(cmd);
        cmd = new v.ChallengeSubmitAnswer(gameName, player2, i, correctWord);
        rv = svr.send(cmd);
      }
      it('returns false when player1 attempts another answer', function() {
        cmd = new v.ChallengeSubmitAnswer(gameName, player1, 10, "bogus");
        rv = svr.send(cmd);
        return rv.should.equal(false);
      });
      it('returns false when player2 attempts another answer', function() {
        cmd = new v.ChallengeSubmitAnswer(gameName, player2, 10, "bogus");
        rv = svr.send(cmd);
        return rv.should.equal(false);
      });
      return it('returns correct scores for both players', function() {
        var answers, player1ans, player2ans, scoreDetails, _j, _results;

        answers = (function() {
          var _j, _results;

          _results = [];
          for (i = _j = 0; _j <= 9; i = ++_j) {
            _results.push(challenge.questionByIndex(i));
          }
          return _results;
        })();
        cmd = new v.ChallengeScoreDetails(gameName);
        scoreDetails = svr.send(cmd);
        player1ans = scoreDetails[0][1];
        player2ans = scoreDetails[1][1];
        _results = [];
        for (i = _j = 0; _j <= 9; i = ++_j) {
          answer = answers[i];
          correctWord = answer[0].word;
          correctWord.should.equal(player1ans[i].answer);
          _results.push(correctWord.should.equal(player2ans[i].answer));
        }
        return _results;
      });
    });
  });

  runTest = function(cmd, expectedMessage) {
    var e;

    e = cmd.getValidationErrors();
    e.length.should.equal(1);
    return e[0].should.equal(expectedMessage);
  };

}).call(this);
