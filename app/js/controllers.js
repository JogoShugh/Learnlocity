// Generated by CoffeeScript 1.6.2
(function() {
  window.userName = "";

  angular.module("qwizly.controllers", []).controller("SplashCtrl", [
    "$location", "$rootScope", function($location, $rootScope) {
      return $location.path('/home');
    }
  ]).controller("MenuCtrl", [
    "$scope", function($scope) {
      return $scope.name = 'learnlocity';
    }
  ]).controller("HomeCtrl", [
    "$dialog", "$scope", '$route', '$routeParams', 'socket', function($dialog, $scope, $route, $routeParams, socket) {
      var cmd;

      if ($routeParams.user != null) {
        cmd = {
          userNameOrEmail: $routeParams.user,
          password: $routeParams.user
        };
        socket.send('Login', cmd);
      }
      return $scope.login = function(item) {
        var d;

        d = $dialog.dialog({
          modalFade: true,
          resolve: {
            item: function() {
              return angular.copy(item);
            }
          }
        });
        return d.open("partials/login.html", "LoginCtrl");
      };
    }
  ]).controller("LoginCtrl", [
    "$rootScope", "$scope", "socket", "dialog", "item", function($rootScope, $scope, socket, dialog, item) {
      $scope.item = item;
      return $scope.submit = function() {
        var cmd;

        cmd = {
          userNameOrEmail: $scope.email,
          password: $scope.password
        };
        socket.send('Login', cmd);
        return dialog.close('ok');
      };
    }
  ]).controller('MainMenuCtrl', [
    '$scope', '$rootScope', function($scope, $rootScope) {
      if ((window.profile.photos != null) && window.profile.photos.length > 0) {
        return $rootScope.userAvatarUrl = window.profile.photos[0].value;
      } else {
        return $rootScope.userAvatarUrl = '';
      }
    }
  ]).controller('ChallengeScoreboardCtrl', [
    '$scope', '$rootScope', 'socket', function($scope, $rootScope, socket) {
      socket.send('ChallengeScoreboard', {
        userName: window.userName
      });
      return $scope.setDetailsVisible = function(challenge) {
        return challenge.detailsVisible = true;
      };
    }
  ]).controller('GroupChallengeCtrl', [
    '$rootScope', '$scope', 'apiFactory', 'socket', '$location', function($rootScope, $scope, apiFactory, socket, $location) {
      var api, challenges, challengesCmd;

      api = apiFactory($scope);
      challenges = [];
      $scope.challenges = challenges;
      $scope.challengeName = {
        name: ''
      };
      $scope.dictionaryList = ['Select a dictionary'];
      $scope.selectedDictionary = {
        name: $scope.dictionaryList[0]
      };
      api.send('DictionaryList', {}, function(dictionaryList) {
        var titles;

        titles = _.pluck(dictionaryList, 'title');
        titles.unshift('Select a dictionary');
        $scope.dictionaryList = titles;
        return $scope.selectedDictionary = {
          name: $scope.dictionaryList[0]
        };
      });
      $scope.createChallenge = function() {
        var cmd;

        if ($scope.selectedDictionary.name !== 'Select a dictionary') {
          console.log('Challenge name: ' + $scope.challengeName.name);
          cmd = {
            userName: window.userName,
            name: $scope.challengeName.name,
            dictionary: $scope.selectedDictionary.name,
            isOpen: true,
            isGroup: true
          };
          console.log(cmd);
          return socket.send("ChallengeCreate", cmd);
        }
      };
      challengesCmd = {
        userName: window.userName
      };
      $scope.challengesOpenPage = 1;
      $scope.challengesOpenNewer = function() {
        if ($scope.challengesOpenPage !== 1) {
          --$scope.challengesOpenPage;
        }
        return socket.send('ChallengesOpen', {
          userName: window.userName,
          page: $scope.challengesOpenPage
        });
      };
      $scope.challengesOpenOlder = function() {
        return socket.send('ChallengesOpen', {
          userName: window.userName,
          page: ++$scope.challengesOpenPage
        });
      };
      $scope.isLastChallengeOpenPage = function() {
        return $scope.challengesOpenPage >= $scope.challengesOpen.pageCount;
      };
      $scope.challengesActivePage = 1;
      $scope.challengesActiveNewer = function() {
        if ($scope.challengesActivePage !== 1) {
          --$scope.challengesActivePage;
        }
        return socket.send('ChallengesActive', {
          userName: window.userName,
          page: $scope.challengesActivePage
        });
      };
      $scope.challengesActiveOlder = function() {
        return socket.send('ChallengesActive', {
          userName: window.userName,
          page: ++$scope.challengesActivePage
        });
      };
      $scope.challengesCompletedPage = 1;
      $scope.challengesCompletedNewer = function() {
        if ($scope.challengesCompletedPage !== 1) {
          --$scope.challengesCompletedPage;
        }
        return socket.send('ChallengesCompleted', {
          userName: window.userName,
          page: $scope.challengesCompletedPage
        });
      };
      $scope.challengesCompletedOlder = function() {
        return socket.send('ChallengesCompleted', {
          userName: window.userName,
          page: ++$scope.challengesCompletedPage
        });
      };
      $scope.resume = function(challengeName) {
        var cmd;

        console.log(challengeName);
        cmd = {
          name: challengeName,
          userName: window.userName
        };
        return socket.send('ChallengeResume', cmd);
      };
      $scope.join = function(challengeName) {
        var cmd;

        cmd = {
          name: challengeName,
          userName: window.userName
        };
        return socket.send("ChallengeJoin", cmd);
      };
      $scope.watch = function(challengeName) {
        var cmd;

        cmd = {
          name: challengeName,
          userName: window.userName
        };
        return socket.send("ChallengeWatch", cmd);
      };
      $scope.spy = function(challengeName) {
        var cmd;

        cmd = {
          name: challengeName,
          userName: window.userName
        };
        return socket.send("ChallengeSpy", cmd);
      };
      $scope.view = function(challengeName) {
        return $location.path('/challengeCompletedDetails').search({
          challengeName: challengeName
        });
      };
      $scope.challengesOpenNewer();
      $scope.challengesActiveNewer();
      return $scope.challengesCompletedNewer();
    }
  ]).controller('ChallengePlayCtrl', [
    '$rootScope', '$scope', '$location', '$route', '$routeParams', 'socket', function($rootScope, $scope, $location, $route, $routeParams, socket) {
      var challenge, challengeName;

      challengeName = $routeParams.challengeName;
      challenge = getChallengeByName(challengeName);
      $scope.challenge = challenge.challengePlay;
      $scope.scoreBoard = challenge.scoreBoard;
      return challenge.sendNextQuestion();
    }
  ]).controller('ChallengeCompletedCtrl', [
    '$scope', '$rootScope', '$route', '$routeParams', function($scope, $rootScope, $route, $routeParams) {
      var challenge, challengeName, _i, _len, _ref, _results;

      challengeName = $routeParams.challengeName;
      _ref = $rootScope.challengesCompleted.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        challenge = _ref[_i];
        if (challenge.details.name === challengeName) {
          console.log('Found:');
          console.log(challenge);
          _results.push($scope.challenge = challenges);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  ]).controller('DictionarySelectCtrl', [
    '$scope', 'apiFactory', '$location', function($scope, apiFactory, $location) {
      var api;

      $scope.dictionaryName = {
        name: ''
      };
      $scope.dictionaryCreate = function() {
        var cmd;

        cmd = {
          title: $scope.dictionaryName.name,
          userName: window.userName
        };
        return api.send('DictionaryCreate', cmd, function(dictionaryCreated) {
          console.log('Created new dictionary:');
          return console.log(dictionaryCreated);
        });
      };
      api = apiFactory($scope);
      $scope.dictionaryList = {
        items: []
      };
      api.send('DictionaryList', {
        page: 1
      }, function(dictionaryList) {
        return $scope.dictionaryList = dictionaryList;
      });
      $scope.page = 1;
      $scope.newer = function() {
        if ($scope.page !== 1) {
          --$scope.page;
        }
        return api.send('DictionaryList', {
          page: $scope.page
        }, function(dictionaryList) {
          return $scope.dictionaryList = dictionaryList;
        });
      };
      $scope.older = function() {
        return api.send('DictionaryList', {
          page: ++$scope.page
        }, function(dictionaryList) {
          return $scope.dictionaryList = dictionaryList;
        });
      };
      return $scope.select = function(dictionary) {
        return $location.path('/definitionAdd').search({
          dictionary: dictionary
        });
      };
    }
  ]).controller('DefinitionAddCtrl', [
    '$scope', 'apiFactory', '$route', '$routeParams', '$location', function($scope, apiFactory, $route, $routeParams, $location) {
      var api;

      api = apiFactory($scope);
      $scope.dictionary = $routeParams.dictionary || $location.path('/dictionarySelect');
      return $scope.definitionAdd = function() {
        var cmd;

        if ($scope.dictionary != null) {
          cmd = {
            word: $scope.word,
            definition: $scope.definition,
            dictionary: $scope.dictionary
          };
          return api.send('DefinitionAdd', cmd, function(definitionAdded) {
            console.log('A definition was added successfully:');
            return console.log(definitionAdded);
          });
        }
      };
    }
  ]);

  '$rootScope.$on "ChallengeSubmitAnswerCorrectForFinishedUsers", (event, message) ->\n  answer =\n    className: \'answerCorrect normColor\'\n    userName: message.userName\n    answer: message.answer\n\n$rootScope.$on "ChallengeSubmitAnswerIncorrectForFinishedUsers", (event, message) ->\n  answer =\n    className: \'answerIncorrect normColor\'\n    userName: message.userName\n    answer: message.answer\n\n$rootScope.$on "ChallengeCompleted", (event, message) ->\n  console.log "Got ChallengedCompleted"\n  #$location.path "/challengeCompleted" ';

}).call(this);
