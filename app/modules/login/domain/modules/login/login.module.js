// Generated by CoffeeScript 1.3.3
(function() {
  var Login, bus, queries, service, utils;

  bus = require('../../bus');

  utils = require('../../utils');

  service = require('../../service');

  queries = require('./queries');

  Login = (function() {

    function Login(userNameOrEmail, password, externalAuth) {
      this.userNameOrEmail = userNameOrEmail != null ? userNameOrEmail : '';
      this.password = password != null ? password : '';
      this.externalAuth = externalAuth != null ? externalAuth : false;
    }

    Login.prototype.getValidationErrors = function() {
      var sv;
      sv = new utils.StringValidator;
      sv.field("Username or Email", this.userNameOrEmail).notEmpty().max(100).min(4);
      if (this.externalAuth) {
        return sv.errors;
      }
      sv.field("Password", this.password).notEmpty().max(50).min(8);
      return sv.errors;
    };

    return Login;

  })();

  bus.registerMessage('Login', Login);

  bus.on('Login', function(cmd) {
    var errors,
      _this = this;
    console.log('here is the command:' + cmd);
    if (global.users[cmd.userNameOrEmail] != null) {
      cmd.externalAuth = true;
    }
    errors = cmd.getValidationErrors();
    if (errors.length > 0) {
      console.log('ErrorOccurred');
      console.log(errors);
      return;
    }
    console.log(errors);
    return queries.authenticate(cmd, function(err, authenticated) {
      var user;
      if (err != null) {
        debug("It blew up:" + err);
        service.NotifySourceClient("ErrorOccurred", err);
      } else {
        if (authenticated) {
          console.log('svc:');
          console.log(service);
          service._onlineMembers.push(cmd.userNameOrEmail);
          user = {
            userName: cmd.userNameOrEmail
          };
          if (cmd.externalAuth) {
            user.profile = global.users[cmd.userNameOrEmail];
          }
          return service.NotifySourceClient('LoginSucceeded', user);
        } else {
          if (cmd.externalAuth) {
            console.log('Ex auth not supported yet');
            return 'registerCmd = new commands.AccountRegister(cmd.userNameOrEmail,\n  cmd.userNameOrEmail, cmd.userNameOrEmail,\n    cmd.userNameOrEmail, "", true)\n@AccountRegister registerCmd, =>\n  @NotifySourceClient "LoginSucceeded", cmd.userNameOrEmail';
          } else {
            return service.NotifySourceClient("LoginFailed", "Could not authenticate user with username or email of ", +cmd.userNameOrEmail);
          }
        }
      }
    });
  });

}).call(this);
